#!/usr/bin/env python3
"""
Script para verificar las retenciones reales en la base de datos
y ver por qu√© no se est√°n enviando en el procesamiento
"""

import sys
sys.path.append('.')

from database import SessionLocal
from models.deposit import Deposit, EstadoDeposito
from models.cheque_retencion import Retencion
from datetime import datetime
from sqlalchemy import func

def main():
    db = SessionLocal()
    
    print("üîç AN√ÅLISIS DE RETENCIONES EN BASE DE DATOS")
    print("=" * 60)
    
    # 1. Ver todas las retenciones que existen
    all_retenciones = db.query(Retencion).all()
    print(f"\nüìä TOTAL RETENCIONES EN BD: {len(all_retenciones)}")
    
    if all_retenciones:
        print("\nüßæ RETENCIONES ENCONTRADAS:")
        for i, ret in enumerate(all_retenciones[:10], 1):  # Mostrar solo las primeras 10
            print(f"  {i}. ID: {ret.id} | Deposit ID: {ret.deposit_id} | N√∫mero: {ret.nro_retencion} | Importe: ${ret.importe}")
        
        if len(all_retenciones) > 10:
            print(f"  ... y {len(all_retenciones) - 10} m√°s")
    
    # 2. Ver retenciones con sus dep√≥sitos y estados
    print(f"\nüè≠ RETENCIONES POR ESTADO DE DEP√ìSITO:")
    estados_count = db.query(
        Deposit.estado, 
        func.count(Retencion.id)
    ).join(
        Retencion, Deposit.deposit_id == Retencion.deposit_id
    ).group_by(Deposit.estado).all()
    
    for estado, count in estados_count:
        print(f"  üìà {estado.value}: {count} retenciones")
    
    # 3. Ver dep√≥sitos LISTOS y sus retenciones (lo que se est√° procesando)
    print(f"\nüéØ DEP√ìSITOS CON ESTADO 'LISTO' Y SUS RETENCIONES:")
    depositos_listos = db.query(Deposit).filter(Deposit.estado == EstadoDeposito.LISTO).all()
    
    total_retenciones_listos = 0
    for dep in depositos_listos:
        retenciones_count = len(dep.retenciones)
        total_retenciones_listos += retenciones_count
        
        if retenciones_count > 0:
            print(f"  ‚úÖ Deposit {dep.deposit_id}: {retenciones_count} retenciones")
            for ret in dep.retenciones:
                print(f"    - N√∫mero: {ret.nro_retencion}, Importe: ${ret.importe}, Concepto: {ret.concepto}")
    
    if total_retenciones_listos == 0:
        print("  ‚ö†Ô∏è PROBLEMA: No hay retenciones asociadas a dep√≥sitos LISTOS")
        print("     Esto explica por qu√© no se env√≠an en el procesamiento!")
    
    # 4. Verificar si hay retenciones recientes que deber√≠an estar en LISTO
    print(f"\nüïê RETENCIONES M√ÅS RECIENTES (√∫ltimas 5):")
    retenciones_recientes = db.query(Retencion).order_by(Retencion.id.desc()).limit(5).all()
    
    for ret in retenciones_recientes:
        deposit = db.query(Deposit).filter(Deposit.deposit_id == ret.deposit_id).first()
        estado = deposit.estado.value if deposit else "NO_ENCONTRADO"
        print(f"  üßæ ID: {ret.id} | Deposit: {ret.deposit_id} | Estado Deposit: {estado}")
        print(f"     N√∫mero: {ret.nro_retencion} | Importe: ${ret.importe} | Concepto: {ret.concepto}")
    
    # 5. Sugerencia de soluci√≥n
    print(f"\nüí° AN√ÅLISIS Y SUGERENCIA:")
    if total_retenciones_listos == 0:
        print("  üéØ PROBLEMA CONFIRMADO: Los dep√≥sitos LISTOS no tienen retenciones")
        print("  üîß SOLUCIONES POSIBLES:")
        print("     1. Crear retenciones en dep√≥sitos que a√∫n est√°n LISTOS")
        print("     2. Cambiar algunos dep√≥sitos ENVIADOS de vuelta a LISTO temporalmente")
        print("     3. Modificar el servicio para buscar retenciones en dep√≥sitos ENVIADOS recientes")
    
    db.close()

if __name__ == "__main__":
    main()
