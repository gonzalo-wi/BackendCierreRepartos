#!/usr/bin/env python3
"""
Script de prueba para verificar que el sistema de logging est√© funcionando
correctamente con los endpoints implementados.
"""

import requests
import json
import time
from datetime import datetime

# Configuraci√≥n de la API
BASE_URL = "http://localhost:8000/api"
HEADERS = {"Content-Type": "application/json"}

def test_logging_system():
    """
    Ejecuta pruebas de los endpoints con logging implementado
    """
    print("üß™ Iniciando pruebas del sistema de logging...")
    print("=" * 60)
    
    # Test 1: Login (debe fallar sin credenciales v√°lidas)
    print("\n1Ô∏è‚É£  Probando endpoint de login...")
    try:
        response = requests.post(
            f"{BASE_URL}/auth/login",
            json={
                "username": "test_user",
                "password": "wrong_password"
            },
            headers=HEADERS
        )
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.json()}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Test 2: Sincronizaci√≥n (debe fallar sin datos v√°lidos)
    print("\n2Ô∏è‚É£  Probando endpoint de sincronizaci√≥n...")
    try:
        response = requests.post(
            f"{BASE_URL}/sync/deposits/jumillano?date=2025-08-08",
            headers=HEADERS
        )
        print(f"   Status: {response.status_code}")
        if response.status_code != 200:
            print(f"   Response: {response.json()}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Test 3: Crear cheque (debe fallar sin autenticaci√≥n)
    print("\n3Ô∏è‚É£  Probando endpoint de crear cheque...")
    try:
        response = requests.post(
            f"{BASE_URL}/cheques-retenciones/cheques",
            json={
                "deposit_id": "TEST123",
                "importe": 5000.0,
                "banco": "Banco Test",
                "nro_cheque": "123456"
            },
            headers=HEADERS
        )
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.json()}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    # Test 4: Crear retenci√≥n (debe fallar sin autenticaci√≥n)
    print("\n4Ô∏è‚É£  Probando endpoint de crear retenci√≥n...")
    try:
        response = requests.post(
            f"{BASE_URL}/cheques-retenciones/retenciones",
            json={
                "deposit_id": "TEST123",
                "importe": 1000.0,
                "concepto": "RIB",
                "nro_retencion": 789
            },
            headers=HEADERS
        )
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.json()}")
    except Exception as e:
        print(f"   ‚ùå Error: {e}")
    
    print("\n" + "=" * 60)
    print("‚úÖ Pruebas completadas. Verificar logs en:")
    print("   üìä Acciones de usuario: logs/user_actions.log")
    print("   üö® Errores t√©cnicos: logs/technical_errors.log") 
    print("   üìã Logs generales: logs/application.log")
    print("\nüí° Para ver los logs en tiempo real:")
    print("   python3 scripts/monitor_logs.py --action watch")

def check_log_files():
    """Verificar que los archivos de log existen y tienen contenido"""
    import os
    
    print("\nüîç Verificando archivos de log...")
    
    log_files = [
        "logs/user_actions.log",
        "logs/technical_errors.log", 
        "logs/application.log"
    ]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            size = os.path.getsize(log_file)
            print(f"   ‚úÖ {log_file}: {size} bytes")
        else:
            print(f"   ‚ùå {log_file}: No existe")

if __name__ == "__main__":
    print("üöÄ Sistema de Logging - Pruebas de Integraci√≥n")
    print(f"‚è∞ Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Verificar archivos de log
    check_log_files()
    
    # Ejecutar pruebas
    test_logging_system()
    
    # Esperar un momento para que se procesen los logs
    print("\n‚è≥ Esperando 2 segundos para que se procesen los logs...")
    time.sleep(2)
    
    # Verificar archivos de log despu√©s de las pruebas
    check_log_files()
    
    print("\nüéâ ¬°Pruebas completadas!")
    print("\nüìã Comandos √∫tiles:")
    print("   Ver estad√≠sticas: python3 scripts/monitor_logs.py --action stats")
    print("   Ver errores: python3 scripts/monitor_logs.py --action errors")
    print("   Monitor en vivo: python3 scripts/monitor_logs.py --action watch")
